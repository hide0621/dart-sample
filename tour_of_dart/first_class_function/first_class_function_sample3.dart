// 関数から他の関数を返す（高階関数 = クロージャー）

// 高階関数（クロージャー）とは、関数から他の関数を返す関数のことであり、

// 自身が定義されたスコープの変数にアクセスできる関数のことを指します。

// クロージャは、その関数が定義された時点での環境（スコープ）を「覚えて」いるため、

// その環境の変数に後からアクセスすることができます。

// 以下の例では、makeAdder関数は、addByという引数を受け取り、

// それを使って新たな関数（クロージャー）（今回ならアロー関数部分のこと）を生成して返しています。

// この新たな関数は、makeAdder関数が呼ばれた時点でのaddByの値を覚えているため、

// その値を使って引数を加算することができます。

Function makeAdder(int addBy) {
  // この関数オブジェクトの中で新たな関数（クロージャー）を定義して返す
  return (int i) => addBy + i;
}

// 上記の関数オブジェクトの定義方法はつまるところ、以下の書き方と同じです。

// var makeAdder = (int addBy) {
//   // この関数オブジェクトの中で新たな関数（クロージャー）を定義して返す
//   return (int i) => addBy + i;
// };

void main() {
  // 上記の関数オブジェクトから新たな関数オブジェクト（クロージャー）を生成
  var add2 = makeAdder(2);
  var add4 = makeAdder(4);

  // 上記で生成したクロージャーを実行
  print(add2(3)); // 5
  print(add4(3)); // 7
}
