// Future:
// Dartの非同期操作を表すクラスで、未来のある時点で利用可能になる値を表します。
// 非同期操作が完了すると、その結果がFutureオブジェクトに格納されます。

// async:
// 非同期関数を定義するためのキーワードです。
// asyncが付いた関数は、必ずFutureを返します。

// await:
// 非同期関数内でのみ使用できるキーワードです。
// awaitが付いた式は、その式が完了する(Futureの結果が利用可能になる)まで非同期関数の実行を一時停止します。

// この3つのステートメントにより非同期処理が簡単に実装でき、
// 非同期処理が同期処理のように直列的に書け、コードが読みやすくなります。

// 非同期処理:
// 上記3つのステートメントを用いて表現されるこの処理については、
// 非同期操作（ネットワークリクエスト、データベースへのクエリ、ファイルの読み書きなどの特に時間が掛かる操作）
// を扱うために使用されることが多い。

// 非同期操作は、メインのプログラムの実行をブロックせずに、バックグラウンドで実行されます。
// これにより、メインのプログラムは他のタスクを続行でき、メインのプログラムの実行をスムーズに行うことができます。
// 非同期操作が完了すると、その結果はFutureオブジェクトに格納され、
// awaitキーワードを使用してその結果を取得できます
// 非同期処理がない場合、特に時間がかかる操作（例えば、ネットワークリクエストやデータベースへのクエリなど）が行われると、
// その操作が完了するまでメインのプログラムの実行がブロックされます。
// これは、その操作が完了するまで他のタスクを実行できないことを意味します。
// したがって、非同期処理を使用しないと、メインのプログラムの実行が重くなり、
// 最悪の場合、アプリケーションが応答しなくなる可能性があります。

Future<String> fetchUserData() async {
  await Future.delayed(const Duration(seconds: 3));
  return 'Hello Future Riverpod!';
}

void main() async {
  print('Fetching user data...');
  final userData = await fetchUserData();
  print('Fetched user data: $userData');
}
